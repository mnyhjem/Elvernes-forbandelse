@model dynamic

@{
    ViewBag.Title = "title";
    //Layout = "_Layout";
}

<h2>title</h2>
<br />
<canvas id="canvas"></canvas>

<br/>
<img src="/charactersprite?t=@DateTime.Now.Ticks" width="5000" />

@section scripts
{
    <script>
        var imgPath = '/charactersprite?t=@DateTime.Now.Ticks';

        var VanillaRunOnDomReady = function() {

            var ctx = document.getElementById('canvas').getContext('2d');


            function SpriteSheet(path, frameWidth, frameHeight) {
                this.image = new Image();
                this.frameWidth = frameWidth;
                this.frameHeight = frameHeight;

                // calculate the number of frames in a row after the image loads
                var self = this;
                this.image.onload = function() {
                    self.framesPerRow = Math.floor(self.image.width / self.frameWidth);
                };

                this.image.src = path;
            }

            function Animation(spritesheet, frameSpeed, startFrame, endFrame, getFramesVertically) {

                var animationSequence = []; // array holding the order of the animation
                var currentFrame = 0; // the current frame to draw
                var counter = 0; // keep track of frame rate

                // start and end range for frames
                if (getFramesVertically) {
                    endFrame = endFrame * (spritesheet.image.width / spritesheet.frameWidth);
                }
                for (var frameNumber = startFrame; frameNumber <= endFrame; frameNumber++) {
                    if (getFramesVertically) {
                        if (frameNumber % (spritesheet.image.width / spritesheet.frameWidth) != 0) {
                            continue;
                        }
                    }
                    animationSequence.push(frameNumber);
                }

                // Update the animation
                this.update = function() {

                    // update to the next frame if it is time
                    if (counter == (frameSpeed - 1))
                        currentFrame = (currentFrame + 1) % animationSequence.length;

                    // update the counter
                    counter = (counter + 1) % frameSpeed;
                };

                // draw the current frame
                this.draw = function(x, y) {
                    // get the row and col of the frame
                    var row = Math.floor(animationSequence[currentFrame] / spritesheet.framesPerRow);
                    var col = Math.floor(animationSequence[currentFrame] % spritesheet.framesPerRow);

                    ctx.drawImage(
                        spritesheet.image,
                        col * spritesheet.frameWidth,
                        row * spritesheet.frameHeight,
                        spritesheet.frameWidth,
                        spritesheet.frameHeight,
                        x,
                        y,
                        spritesheet.frameWidth,
                        spritesheet.frameHeight);
                };
            }

            // spritesheet.src = spritesheet.png
            // the image above has been turned into a data url
            // so that no external files are required for
            // this web page - useful for included in a 
            // "gist" or "jsfiddle" page
            spritesheet = new SpriteSheet(imgPath, 64, 64);
            walk = new Animation(spritesheet, 10, 0, 5, true);

            function animate() {
                requestAnimFrame(animate);
                ctx.clearRect(0, 0, 150, 150);

                walk.update();

                walk.draw(12.5, 12.5);
            }

            window.requestAnimFrame = (function() {
                return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    function(callback, element) {
                        window.setTimeout(callback, 1000 / 60);
                    };
            })();

            animate();
        }

        var alreadyrunflag = 0;

        if (document.addEventListener)
            document.addEventListener("DOMContentLoaded",
                function() {
                    alreadyrunflag = 1;
                    VanillaRunOnDomReady();
                },
                false);
        else if (document.all && !window.opera) {
            document
                .write('<script type="text/javascript" id="contentloadtag" defer="defer" src="javascript:void(0)"><\/script>');
            var contentloadtag = document.getElementById("contentloadtag")
            contentloadtag.onreadystatechange = function() {
                if (this.readyState == "complete") {
                    alreadyrunflag = 1;
                    VanillaRunOnDomReady();
                }
            }
        }

    </script>
}
